#!/usr/bin/env ruby
require 'benchmark'
require 'rubygems'
TEST_OPTIONS = {}

test_count = ARGV[1].to_i
raise('test count must be more than at least 0') if test_count <= 0

TESTING_AMOUNT= test_count
ENDPOINT_DECLARATION_AMOUNT = (ARGV[1] || raise('missing endpoint count')).to_i
SUBJECT_NAME= ARGV[0].to_s.downcase

T = {}
def run(app)
  T[:instance] = app
end

benchmark_folder = File.realpath(File.dirname(File.dirname(__FILE__)))
app_folder = File.realpath(File.join(File.dirname(__FILE__), '..', 'apps', SUBJECT_NAME.downcase))
config_file_path = File.join(app_folder, 'config.ru')

Dir.chdir(app_folder)
require 'bundler'
Bundler.require

load(config_file_path)

rack_env = {
    "REMOTE_ADDR" => "192.168.56.1",
    "REQUEST_METHOD" => 'GET',
    "REQUEST_PATH" => '/',
    "REQUEST_URI" => '/',
    "PATH_INFO" => '/',
    "SERVER_PROTOCOL" => "HTTP/1.1",
    "CONTENT_LENGTH" => "0",
    "CONTENT_TYPE" => "application/x-www-form-urlencoded",
    "SERVER_NAME" => "hds-dev.ett.local",
    "SERVER_PORT" => "80",
    "QUERY_STRING" => 'hello=world',
    "HTTP_VERSION" => "HTTP/1.1",
    "HTTP_USER_AGENT" => "spec",
    "HTTP_HOST" => "spec.local",
    "HTTP_ACCEPT_ENCODING" => "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
    "HTTP_ACCEPT" => "*/*",
    "HTTP_CONNECTION" => "close",
    "rack.input" => ::Rack::Lint::InputWrapper.new(StringIO.new(''))
}

require 'yaml'
benchmark_result = TESTING_AMOUNT.times.map do
  env = rack_env.dup
  Benchmark.measure { T[:instance].call(env) }
end


def load_file(file_path)
  file_content = File.read(file_path)
  return Hash.new if file_content.to_s.empty?
  YAML.load(file_content)
rescue Errno::ENOENT
  unless File.exist?(file_path)
    File.write(file_path, YAML.dump({}))
  end
  sleep(1)
  retry
end

measure_file_path = File.join(benchmark_folder, 'measure.yml')
benchmarks = load_file(measure_file_path)

gem_version = Gem.loaded_specs[SUBJECT_NAME].version.to_s
gem_space = (benchmarks[SUBJECT_NAME] ||= {})
results = (gem_space[gem_version] ||= [])

def avg(array, method)
  array.reduce(0.0) { |r, bm| r + bm.public_send(method) } / array.length
end

user_time = avg(benchmark_result, :utime)
system_time = avg(benchmark_result, :stime)
total_time = avg(benchmark_result, :total)
real_time = avg(benchmark_result, :real)

results.push(
    {
        'user' => user_time,
        'system' => system_time,
        'total' => total_time,
        'real' => real_time,
        'eda' => ENDPOINT_DECLARATION_AMOUNT,
        'weight' => TESTING_AMOUNT
    }
)

File.write(measure_file_path, YAML.dump(benchmarks))

exit
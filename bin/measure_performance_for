#!/usr/bin/env ruby
require 'benchmark'
TEST_CASES = [
    10000,
    100000,
    1000000,
]

SUBJECT = {
    name: ARGV[0].to_s.downcase
}

def run(app)
  SUBJECT[:instance] = app
end

benchmark_folder = File.realpath(File.dirname(File.dirname(__FILE__)))
app_folder = File.realpath(File.join(File.dirname(__FILE__), '..', 'apps', SUBJECT[:name].downcase))
config_file_path = File.join(app_folder, 'config.ru')

Dir.chdir(app_folder)
require 'bundler'
Bundler.require

load(config_file_path)

rack_env = {
    "REMOTE_ADDR" => "192.168.56.1",
    "REQUEST_METHOD" => 'GET',
    "REQUEST_PATH" => '/',
    "REQUEST_URI" => '/',
    "PATH_INFO" => '/',
    "SERVER_PROTOCOL" => "HTTP/1.1",
    "CONTENT_LENGTH" => "0",
    "CONTENT_TYPE" => "application/x-www-form-urlencoded",
    "SERVER_NAME" => "hds-dev.ett.local",
    "SERVER_PORT" => "80",
    "QUERY_STRING" => 'hello=world',
    "HTTP_VERSION" => "HTTP/1.1",
    "HTTP_USER_AGENT" => "spec",
    "HTTP_HOST" => "spec.local",
    "HTTP_ACCEPT_ENCODING" => "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
    "HTTP_ACCEPT" => "*/*",
    "HTTP_CONNECTION" => "close",
    "rack.input" => ::Rack::Lint::InputWrapper.new(StringIO.new(''))
}


benchmark_result = Benchmark.bm(20) do |x|
  TEST_CASES.each do |amount|
    x.report(amount) { amount.times { SUBJECT[:instance].call(rack_env.dup) } }
  end
end

require 'yaml'

def load_file(file_path)
  file_content = File.read(file_path)
  return Hash.new if file_content.to_s.empty?
  YAML.load(file_content)
rescue Errno::ENOENT
  unless File.exist?(file_path)
    File.write(file_path, YAML.dump({}))
  end
  sleep(1)
  retry
end

measure_file_path = File.join(benchmark_folder, 'measure.yml')
benchmarks = load_file(measure_file_path)
results = (benchmarks[SUBJECT[:name]] ||= [])

benchmark_result.each do |bm|
  results.push(
      {
          'user' => bm.utime,
          'system' => bm.stime,
          'total' => bm.total,
          'real' => bm.real,
          'test_quantity' => bm.label.to_i
      }
  )
end

File.write(measure_file_path, YAML.dump(benchmarks))

exit
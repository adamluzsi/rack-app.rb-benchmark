#!/usr/bin/env ruby
require 'benchmark'
require 'rubygems'

SUBJECT_NAME= (ARGV[0] || raise('missing framework gem name')).to_s.downcase
ENV['EDA']= (ENV['EDA'] || ARGV[1] || 1).to_s

TEST_TYPE = ARGV[2].to_s =~ /^d/i ? 'dynamic' : 'static'

TESTING_AMOUNT= 1000

class TEST
  class << self
    attr_accessor :instance
  end
end

def run(app)
  TEST.instance = app
end

require 'yaml'

def load_file(file_path)
  file_content = File.read(file_path)
  return Hash.new if file_content.to_s.empty?
  YAML.load(file_content)
rescue Errno::ENOENT
  unless File.exist?(file_path)
    File.write(file_path, YAML.dump({}))
  end
  sleep(1)
  retry
end

benchmark_folder = File.realpath(File.dirname(File.dirname(__FILE__)))
app_folder = File.realpath(File.join(File.dirname(__FILE__), '..', 'apps', SUBJECT_NAME.downcase))
config_file_path = File.join(app_folder, 'config.ru')

Dir.chdir(app_folder)
require 'bundler'
Bundler.require

load(config_file_path)

request_path = TEST_TYPE == 'static' ? '/' : '/users/123'

rack_env = {
    "REMOTE_ADDR" => "192.168.56.1",
    "REQUEST_METHOD" => 'GET',
    "REQUEST_PATH" => request_path,
    "REQUEST_URI" => request_path,
    "PATH_INFO" => request_path,
    "SERVER_PROTOCOL" => "HTTP/1.1",
    "CONTENT_LENGTH" => "0",
    "CONTENT_TYPE" => "application/x-www-form-urlencoded",
    "SERVER_NAME" => "hds-dev.ett.local",
    "SERVER_PORT" => "80",
    "QUERY_STRING" => 'hello=world',
    "HTTP_VERSION" => "HTTP/1.1",
    "HTTP_USER_AGENT" => "spec",
    "HTTP_HOST" => "spec.local",
    "HTTP_ACCEPT_ENCODING" => "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
    "HTTP_ACCEPT" => "*/*",
    "HTTP_CONNECTION" => "close",
    "rack.input" => ::Rack::Lint::InputWrapper.new(StringIO.new(''))
}


rack_envs = TESTING_AMOUNT.times.map { rack_env.dup }
eda = SUBJECT_NAME == 'rack' ? 1 : ENV['EDA'].to_i
benchmark_result = Benchmark.measure { TESTING_AMOUNT.times { |i| TEST.instance.call(rack_envs[i]) } }

report = {
    'user' => benchmark_result.utime,
    'system' => benchmark_result.stime,
    'total' => benchmark_result.total,
    'real' => benchmark_result.real,
    'eda' => eda,
    'weight' => TESTING_AMOUNT
}


measure_file_path = File.join(benchmark_folder, "#{TEST_TYPE}.yml")
benchmarks = load_file(measure_file_path)

gem_version = Gem.loaded_specs[SUBJECT_NAME].version.to_s
gem_space = (benchmarks[SUBJECT_NAME] ||= {})
reports = (gem_space[gem_version] ||= [])
reports << report

File.write(measure_file_path, YAML.dump(benchmarks))

exit

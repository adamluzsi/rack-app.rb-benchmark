#!/usr/bin/env ruby

require 'yaml'

measured_times = %W[user system total real]

sort_by_key = ARGV[0]

raise("Choose one from the following: #{measured_times.join(', ')}") unless measured_times.include?(sort_by_key)


benchmark_folder = File.realpath(File.dirname(File.dirname(__FILE__)))
measure_file_path = File.join(benchmark_folder, 'measure.yml')

reports = YAML.load_file(measure_file_path)

results = reports.reduce([]) do |results, (app, reports)|

  element = {}
  element['name'] = app

  %W[user system total real].each do |key|
    weighted_times = reports.reduce([]){|wr,el| el['test_quantity'].times{ wr << (el[key].to_f / el['test_quantity']) } ;wr}

    average_time = (weighted_times.reduce(0.0,&:+)) / weighted_times.length

    element[key]= average_time
  end

  results.push(element)

  results
end

label_width = (measured_times + ['name']).reduce(0) do |label_width, key|

  max_value_for_key = results.map { |r| r[key].to_s.length }.max
  if max_value_for_key > label_width
    max_value_for_key
  else
    label_width
  end

end

def ljust_join(array, label_width)
  "| #{array.map { |e| e.to_s.ljust(label_width) }.join(' | ')} |"
end

$stdout.puts(ljust_join(['name', *measured_times], label_width))

$stdout.puts(ljust_join((measured_times.length+1).times.map { '-' * label_width }, label_width))
results.sort_by { |e| e[sort_by_key] }.each do |element|

  to_write = []
  to_write << element['name']
  measured_times.each do |key|
    to_write << element[key]
  end

  $stdout.puts(ljust_join(to_write, label_width))

end

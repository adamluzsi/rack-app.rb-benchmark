#!/usr/bin/env ruby

require 'yaml'

measured_times = %W[user system total real]
sort_by_key = ARGV[0]
raise("Choose one from the following: #{measured_times.join(', ')}") unless measured_times.include?(sort_by_key)
benchmark_folder = File.realpath(File.dirname(File.dirname(__FILE__)))


def ljust_join(array, label_width)
  "| #{array.map { |e| e.to_s.ljust(label_width) }.join(' | ')} |"
end


def out_put_table_for(eda, results, headers, sort_by_key, column_width)
  $stdout.puts("\n\n#### number of declared endpoints: #{eda}\n\n")
  $stdout.puts(ljust_join(headers, column_width))
  $stdout.puts(ljust_join((headers.length).times.map { '-' * column_width }, column_width))

  first_speed = nil
  results.sort_by { |e| e[sort_by_key] }.each do |element|
    first_speed ||= element[sort_by_key].to_f

    to_write = []
    to_write << element['name']
    to_write << element['version']

    slower_than_first_amount = (element[sort_by_key] / first_speed).round(3)
    to_write << slower_than_first_amount
    to_write << element[sort_by_key]

    $stdout.puts(ljust_join(to_write, column_width))
  end
end


$stdout.puts <<-MARKDOWN

## [Benchmarking](https://github.com/rack-app/rack-app-benchmark)

This is a repo that used for measure Rack::App project speed in order keep an eye on the performance in every release.

the benchmarking was taken on the following hardware specification:
* Processor: 2,7 GHz Intel Core i5
* Memory: 16 GB 1867 MHz DDR3
* Ruby: ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin15.0]

MARKDOWN

%W[ static.yml dynamic.yml ].each do |results_source_file|

  measure_file_path = File.join(benchmark_folder, results_source_file)
  next unless File.exist?(measure_file_path)

  $stdout.puts("\n### Endpoint to be call type: #{File.basename(results_source_file, '.yml')}")

  reports = YAML.load_file(measure_file_path)

  results = reports.reduce([]) do |results, (app, versions)|
    versions.each do |version, ungroupped_reports|
      ungroupped_reports.group_by { |el| el['eda'] }.each do |eda, reports|

        element = {}
        element['name'] = app
        element['version'] = version
        element['eda'] = eda

        %W[user system total real].each do |key|
          weighted_times = reports.reduce([]) { |wr, el| el['weight'].to_i.times { wr << (el[key].to_f / el['weight'].to_i) }; wr }

          average_time = (weighted_times.reduce(0.0, &:+)) / weighted_times.length

          element[key]= average_time
        end

        results.push(element)

      end
    end

    results
  end

  times_slower_label = 'current / fastest'
  headers = ['name', 'version', times_slower_label, sort_by_key]
  label_width = (measured_times + headers).reduce(0) do |label_width, key|
    new_width = label_width

    max_value_for_key = results.map { |r| r[key].to_s.length }.max
    header_length = key.to_s.length
    if header_length > new_width
      new_width = header_length
    end

    if max_value_for_key > new_width
      new_width = max_value_for_key
    end

    new_width
  end

  rack_results = results.select { |el| el['name'] == 'rack' }
  results.group_by { |el| el['eda'] }.sort_by { |eda, _| eda }.each do |eda, grouped_results|
    next if eda.to_i == 1

    out_put_table_for(eda, (rack_results + grouped_results), headers, sort_by_key, label_width)
  end

end
